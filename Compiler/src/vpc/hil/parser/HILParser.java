/* Generated By:JavaCC: Do not edit this line. HILParser.java */
package vpc.hil.parser;

import vpc.hil.Device;
import cck.parser.SimpleCharStream;

import java.io.InputStream;
import java.util.Vector;

public class HILParser implements HILParserConstants {

    public Device Device() throws ParseException {
        jj_consume_token(KW_DEVICE);
        Token n = jj_consume_token(IDENTIFIER);
        Device d = new Device(n);
        jj_consume_token(TK_LBRACE);
        DeviceBody(d);
        jj_consume_token(TK_RBRACE);
        jj_consume_token(0);
        return d;
    }

    public void DeviceBody(Device d) throws ParseException {
        label_1:
        while (true) {
            switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                case KW_INTERRUPT:
                case KW_REGISTER:
                case KW_INSTRUCTION:
                case KW_REGION:
                case KW_SPACE:
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            DeviceMember(d);
        }
    }

    public void DeviceMember(Device d) throws ParseException {
        switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
            case KW_SPACE:
                Space(d);
                break;
            case KW_REGION:
                Region(d);
                break;
            case KW_INTERRUPT:
                Interrupt(d);
                break;
            case KW_REGISTER:
                Register(d);
                break;
            case KW_INSTRUCTION:
                Instruction(d);
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void Space(Device d) throws ParseException {
        jj_consume_token(KW_SPACE);
        Token n = jj_consume_token(IDENTIFIER);
        jj_consume_token(TK_LBRACKET);
        Token w = Integer();
        jj_consume_token(TK_RBRACKET);
        jj_consume_token(TK_COLON);
        Token t = Type();
        jj_consume_token(TK_SEMI);
        d.newSpace(n, w, t);
    }

    public void Region(Device d) throws ParseException {
        jj_consume_token(KW_REGION);
        Token n = jj_consume_token(IDENTIFIER);
        jj_consume_token(TK_ASSIGN);
        Token s = jj_consume_token(IDENTIFIER);
        jj_consume_token(TK_LBRACKET);
        Token l = Integer();
        jj_consume_token(TK_ELLIPSIS);
        Token h = Integer();
        jj_consume_token(TK_RBRACKET);
        jj_consume_token(TK_SEMI);
        d.newRegion(n, s, l, h);
    }

    public void Interrupt(Device d) throws ParseException {
        Token fr = null, fb = null, mr = null, mb = null;
        jj_consume_token(KW_INTERRUPT);
        Token i = Integer();
        jj_consume_token(TK_ASSIGN);
        Token n = jj_consume_token(IDENTIFIER);
        switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                mr = jj_consume_token(IDENTIFIER);
                jj_consume_token(TK_LBRACKET);
                mb = jj_consume_token(DECIMAL_LITERAL);
                jj_consume_token(TK_RBRACKET);
                switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                        fr = jj_consume_token(IDENTIFIER);
                        jj_consume_token(TK_LBRACKET);
                        fb = jj_consume_token(DECIMAL_LITERAL);
                        jj_consume_token(TK_RBRACKET);
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                }
                break;
            default:
                jj_la1[3] = jj_gen;
        }
        jj_consume_token(TK_SEMI);
        d.newInterrupt(n, i, fr, fb, mr, mb);
    }

    public void Register(Device d) throws ParseException {
        jj_consume_token(KW_REGISTER);
        Token n = jj_consume_token(IDENTIFIER);
        jj_consume_token(TK_ASSIGN);
        Token r = jj_consume_token(IDENTIFIER);
        jj_consume_token(TK_LBRACKET);
        Token i = Integer();
        jj_consume_token(TK_RBRACKET);
        jj_consume_token(TK_SEMI);
        d.newRegister(n, r, i);
    }

    public void Instruction(Device d) throws ParseException {
        jj_consume_token(KW_INSTRUCTION);
        Token n = jj_consume_token(IDENTIFIER);
        jj_consume_token(TK_LPAREN);
        jj_consume_token(TK_RPAREN);
        jj_consume_token(TK_SEMI);
        d.newInstruction(n);
    }

    public Token Integer() throws ParseException {
        switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
            case DECIMAL_LITERAL:
                return jj_consume_token(DECIMAL_LITERAL);
            case HEX_LITERAL:
                return jj_consume_token(HEX_LITERAL);
            case BIN_LITERAL:
                return jj_consume_token(BIN_LITERAL);
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public Token Type() throws ParseException {
        switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                return jj_consume_token(IDENTIFIER);
            case DECIMAL_LITERAL:
                return jj_consume_token(DECIMAL_LITERAL);
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public HILParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private int jj_gen;
    private final int[] jj_la1 = new int[6];
    private static int[] jj_la1_0;
    private static int[] jj_la1_1;

    static {
        jj_la1_0();
        jj_la1_1();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[]{0xf4000, 0xf4000, 0x800000, 0x800000, 0x700000, 0x900000,};
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    public HILParser(InputStream stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new HILParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) return jj_ntk = (token.next = token_source.getNextToken()).kind;
        else return jj_ntk = jj_nt.kind;
    }

    private Vector jj_expentries = new Vector();
    private int jj_kind = -1;

    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[36];
        for (int i = 0; i < 36; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 6; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & 1 << j) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & 1 << j) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 36; i++) {
            if (la1tokens[i]) {
                int[] jj_expentry= new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

}
