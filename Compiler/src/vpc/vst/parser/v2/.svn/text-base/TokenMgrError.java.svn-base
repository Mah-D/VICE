/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 3.0 */
package vpc.vst.parser.v2;

public class TokenMgrError extends Error {

    /**
     * Replaces unprintable characters by their espaced (or unicode escaped) equivalents in the given string
     */
    protected static String addEscapes(String str) {
        StringBuffer retval = new StringBuffer();
        char ch;
        for (int i = 0; i < str.length(); i++) {
            switch (str.charAt(i)) {
                case 0 :
                    continue;
                case '\b':
                    retval.append("\\b");
                    continue;
                case '\t':
                    retval.append("\\t");
                    continue;
                case '\n':
                    retval.append("\\n");
                    continue;
                case '\f':
                    retval.append("\\f");
                    continue;
                case '\r':
                    retval.append("\\r");
                    continue;
                case '\"':
                    retval.append("\\\"");
                    continue;
                case '\'':
                    retval.append("\\\'");
                    continue;
                case '\\':
                    retval.append("\\\\");
                    continue;
                default:
                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                        String s = "0000" + Integer.toString(ch, 16);
                        retval.append("\\u").append(s.substring(s.length() - 4, s.length()));
                    } else {
                        retval.append(ch);
                    }
            }
        }
        return retval.toString();
    }

    /**
     * Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical
     * error. Parameters : EOFSeen     : indicates if EOF caused the lexicl error curLexState : lexical state
     * in which this error occured errorLine   : line number when the error occured errorColumn : column
     * number when the error occured errorAfter  : prefix that was seen before this error occured curchar
     * : the offending character Note: You can customize the lexical error message by modifying this method.
     */
    protected static String LexicalError(boolean EOFSeen, int errorLine, int errorColumn, String errorAfter, char curChar) {
        return "Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + (EOFSeen ? "<EOF> " : "\"" + addEscapes(String.valueOf(curChar)) + "\"" + " (" + (int)curChar + "), ") + "after : \"" + addEscapes(errorAfter) + "\"";
    }

    /*
    * Constructors of various flavors follow.
    */

    public TokenMgrError(String message) {
        super(message);
    }

    public TokenMgrError(boolean EOFSeen, int errorLine, int errorColumn, String errorAfter, char curChar) {
        this(LexicalError(EOFSeen, errorLine, errorColumn, errorAfter, curChar));
    }
}
