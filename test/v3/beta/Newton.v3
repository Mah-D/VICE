class Board {
	value SIZE: int = 10;

	field board: Array<Array<char>>;

	new() {
		board = new Array<Array<char>>(SIZE);
		local i = 0;
		while (i < SIZE) {
			board(i) = new Array<char>(SIZE);
			i = i + 1;
		}
	}

	method flip(a: (int, int), b: (int, int)) {
		local dx = b.0 - a.0;
		local dy = b.1 - a.1;
		if (dx * dx + dy * dy == 1) {
			// this is a valid move.
			local tmp = board(a.0)(a.1);
			board(a.0)(a.1) = board(b.0)(b.1);
			board(b.0)(b.1) = tmp;
		}
	}

	method cancel() -> int {
		local y = 0;
		while (y < SIZE) {
			local x = 0;
			while (x < SIZE - 2) {
				x = x + 1;
			}
			y = y + 1;
		}
		return 0;
	}

	method drop() {
		local x = 0;
		while (x < SIZE) {
			local y = SIZE - 1;
			local p = SIZE - 1;
			while (y >= 0) {
				local item = board(x)(y);
				board(x)(p) = item;
				if (item != 0) p = p + 1;
				y = y - 1;
			}
			while (p >= 0) {
				board(x)(p) = 0;
				p = p + 1;
			}
			x = x + 1;
		}
	}
}
