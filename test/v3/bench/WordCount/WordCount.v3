//
// Benchmark program to generate output similar to the "wc" Unix command.
//
program WordCount {
	entrypoint main = WordCount.main;
}
component WordCount {
	field totalLines: int;
	field totalWords: int;
	field totalChars: int;

	method main(args: Array<Array<char>>) -> int {
		local i = 0;
		while (i < args.length) {
			wordCount(args(i));
			i = i + 1;
		}
		if (args.length > 1) printLine(totalLines, totalWords, totalChars, "total");
		return 0;
	}
	method wordCount(file: Array<char>) {
		local buffer = System.fileLoad(file);
		local words = 0, lines = 0;
		if (buffer != null) {
			local i = 0;
			local inWord = false;
			while (i < buffer.length) {
				match (buffer(i)) {
					' ': {
						inWord = false;
					}
					'\t': {
						inWord = false;
					}
					'\n': {
						inWord = false;
						lines = lines + 1;
					}
				} else {
					if (!inWord) words = words + 1;
					inWord = true;
				}
				i = i + 1;
			}
			printLine(lines, words, buffer.length, file);
			totalLines = totalLines + lines;
			totalWords = totalWords + words;
			totalChars = totalChars + buffer.length;
		} else {
			System.puts(file);
			System.puts(": no such file or directory\n");
		}
	}
	method printLine(lines: int, words: int, chars: int, name: Array<char>) {
		printInt(lines);
		printInt(words);
		printInt(chars);
		System.putc(' ');
		System.puts(name);
		System.putc('\n');		
	}
	method printInt(val: int) {
		// print an integer, right-justified, with width 8
		local buffer = "0         ";
		if (val != 0) {
			buffer = new Array<char>(11);
			local i = 0;
			while (i < buffer.length) {
				if (val == 0) {
					buffer(i) = ' ';
				} else {
					buffer(i) = ::char((val % 10) + '0');
				}
				val = val / 10;
				i = i + 1;
			}
		}
		local j = 7;
		while (buffer(j) != ' ') j = j + 1;
		while (j >= 0) {
			System.putc(buffer(j));
			j = j - 1;
		}
	}
}