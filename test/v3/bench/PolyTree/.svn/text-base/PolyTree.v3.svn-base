//
// This program implements a simple (unbalanced) binary tree,
// representing each node as an object. The initializer builds
// a tree for a set of randomly generated integers; tree search
// is used as a benchmark for execution performance at runtime.
//
// @author Akop Palyan
// @author Ben L. Titzer
//
program PolyTree {
	entrypoint main = PolyTree.main;
}

class Value {
	value val: int;
	new(val) { }
}

class Node<T> {
	value key: int;
	field left: Node<T>;
	field right: Node<T>;
	field val: T;

	new(key) {
		left = null;
		right = null;
	}
}

class Tree<T> {
	value none: T;
	field root: Node<T> = null;

	new(none) { }

	method insert(k: int, v: T) {
		if (root == null) {
			root = new Node<T>(k);
			root.val = v;
		} else {
			insertAt(root, k).val = v;
		}
	}

	method insertAt(n: Node<T>, k: int) -> Node<T> {
		if (k <= n.key) {
			if (n.left == null) {
				n.left = new Node<T>(k);
				return n.left;
			} else {
				return insertAt(n.left, k);
			}
		} else {
			if (n.right == null) {
				n.right = new Node<T>(k);
				return n.right;
			} else {
				return insertAt(n.right, k);
			}
		}
	}

	method search(k: int) -> T {
		return searchAt(root, k);
	}

	method searchAt(n: Node<T>, k: int) -> T {
		if (n == null) {
			return none;
		} else if (k < n.key) {
			return searchAt(n.left, k);
		} else if (k > n.key) {
			return searchAt(n.right, k);
		} else {
			return n.val;
		}
	}
}

component PolyTree {
	field seed: int = 1;
	field tree_val: Tree<Value> = new Tree<Value>(null);
	field tree_int: Tree<int> = new Tree<int>(0);
	field v: Value = null;

	new() {
		local i = 0;
		while (i < 50) {
			local k = rand() % 200;
			//tree_val.insert(k, new Value(k));
			tree_int.insert(k, k);
			i = i + 1;
		}
	}

	method main(args: Array<Array<char>>) {
		local i = 0;
		local cumul1 = 0;
		local cumul2 = 0;
		while (i < 100) {
			local j = 0;
			while (j < 200) {
				cumul2 = cumul2 + tree_int.search(j);
				j = j + 1;
			}
			i = i + 1;
		}
		System.puti(cumul2);
		System.putc('\n');
	}

	method rand() -> int {
		seed = 1664525 * seed + 1013904223;
		return seed;
	}
}
